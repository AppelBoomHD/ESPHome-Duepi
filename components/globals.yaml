esphome:
  on_boot:
    - priority: -10
      then: 
        - lambda: |- 
            id(uart_send) = 0;
            id(room_temp_stove).publish_state(17.0);
            id(power_level).publish_state(1);
            id(pellet_speed).publish_state(1);
            id(fan_mode) = 1;
            id(flu_gas_temp).publish_state(17.0);
            id(exh_fan_speed).publish_state(0);
            id(burner_status).publish_state("All OK, startup");
            id(Stove).target_temperature = 21.0;
            id(target_temperature).publish_state(30.0);

api:
  services:
    - service: write
      variables:
        command: string
      then:
        - wait_until:
            condition:
              lambda: 'return (id(uart_send) == 0);'
            timeout: 1s
        - lambda: id(uart_send) = 10;
        - script.execute:         
            id: UART_CMD
            command_in: !lambda return command;        
        - script.wait: UART_CMD
        - wait_until:
            condition:
              lambda: 'return (id(uart_send) == 0);'
            timeout: 100ms 

logger:
  level: VERBOSE #makes uart stream available in esphome logstream
  baud_rate: 0 #disable logging over uart

captive_portal:

globals:
   - id: uart_send
     type: int
     restore_value: no
     initial_value: '0'
   - id: fan_mode
     type: int
     restore_value: no
     initial_value: '1'
   - id: firmware
     type: std::string
     restore_value: no
     initial_value: '"0000"'
   - id: heat_mode
     type: bool
     restore_value: no
     initial_value: 'false' # false is idle, true is heat
